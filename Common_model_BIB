#####################
## MOLECULAR MODEL ##
#####################

# This file processes all datasets jointly. We assume each group has its own molecular model, but shares biogeographic model.
filenames <- [  "Acaena.nex",
                "Azorella.nex",
                "Colobanthus.nex",
                "Pringlea2.nex",
                "Polystichum.nex",
                "Notogrammitis.nex",
                "Austroblechnum.nex"]


for ( i in 1:filenames.size() )
{
    X <- readDiscreteCharacterData( filenames[i] )

    D[i] <- X[1]    # Read in all molecular data matrices into the vector D
    B[i] <- X[2]    # Read in all biogeographic matrices into the vector B
}

# Define the molecular model for each group
mvi = 1

for ( i in 1:D.size() )
{
    # Define priors for elements of rate matrix
    pi_M[i] ~ dnDirichlet( v(1,1,1,1) )
    r_M[i]  ~ dnDirichlet( v(1,1,1,1,1,1) )

    # Define rate matrix
    Q_M[i] := fnGTR( r_M[i], pi_M[i] )

    # Define clock rate
    clockRate_M[i] ~ dnExponential( 3000.0 )   # We observe in BEAST TRACER that clockrate parameter for strict clock was always around 10E-4 with intervals around 10E-3.

   # Set tree prior parameters
    
    # Set bd model priors
 
    # Diversification prior
    # The mean of the diversification prior corresponds to an expectation based on data from BEAST analysis of Acaena using a BD model
    # where BirthDeath Mean = 0.025, 95%HPD (0.006-0.045), Value range (0.001,0.088)
        
    diversification[i] ~ dnGamma(0.2, 1.0)
    turnover[i] ~ dnUniform(0.000001,0.999999)

    # Convert to underlying parameters
    lambda[i] := diversification[i] / abs(1.0 - turnover[i])
    mu[i]     := turnover[i] * lambda[i]

    ## Set the root age. Since most groups are post-Late Miocene, we use an exponential very broad, with minimum 0 Ma and "maximum" (13.06) following Acaena  new dating with crown 8.16 Ma.
    # where rexp (0.60), Mean = 1.58; 95%HPD= 0.44-2.14; Min = 0.0003; Max= 13.0583
    rootAge[i] ~ dnExponential( 0.60)
   
   # We define the complete tree model
    tau[i] ~ dnBirthDeath(  lambda = lambda[i],
                            mu = mu[i],
                            rootAge = rootAge[i],
                            rho = 1.0,
                            samplingStrategy = "uniform",
                            condition = "time",
                            taxa = D[i].taxa()
                        )
    alpha_M[i] ~ dnExponential(2.0)
    probs <- v( 0.125, 0.375, 0.625, 0.875 )
    for ( j in 1:4 )
        siteRates_M[i][j] := qgamma( probs[j], alpha_M[i], alpha_M[i] )
    seq_M[i] ~ dnPhyloCTMC( tree        = tau[i],
                            Q           = Q_M[i],
                            branchRates = clockRate_M[i],
                            siteRates   = siteRates_M[i],
                            nSites      = D[i].nchar(),
                            type        = "DNA"
                          )
    seq_M[i].clamp( D[i] )

# add moves
    moves[ mvi++ ] = mvScale(clockRate_M[i],lambda=1,tune=true,weight=1)
    moves[ mvi++ ] = mvScale(rootAge[i],lambda=1,tune=true,weight=1)
    moves[ mvi++ ] = mvScale(diversification[i],lambda=1,tune=true,weight=1)
    moves[ mvi++ ] = mvScale(turnover[i],lambda=1,tune=true,weight=1)
    moves[ mvi++ ] = mvNNI(tau[i], weight=10.0)
    moves[ mvi++ ] = mvFNPR(tau[i], weight=10.0)
    moves[ mvi++ ] = mvSubtreeScale(tau[i], weight=5.0)
    moves[ mvi++ ] = mvNodeTimeSlideUniform(tau[i], weight=10.0)
    moves[ mvi++ ] = mvScale(alpha_M[i], lambda=1, tune=true, weight=1.0)   
}

###########################
## BIOGEOGRAPHICAL MODEL ##
###########################

# We assume the biogeographic data are contained in the vector B_P,
# and that the molecular models are contained in vectors of model
# parameters where the vector tau_P is the vector of trees. We
# assume that it is a time tree with branch lengths measured in Myr. 

# We assume following state codes (0-offset in Nexus file, 1-offset here)
# Coding: 0 = Mainland, 1 = Gondwanan Fragments, 2 = Eastern Austral Archipelagos]

# Define the island carrying capacities and biotic exchange intensities
pi_bio ~ dnDirichlet( v(1,1,1,1) )
r_bio  ~ dnDirichlet( v(1,1,1,1,1,1) )

# Define thes biogeographic rate matrix
Q_bio := fnGTR( r_bio, pi_bio )


# Migration rate is defined in units of time; prior is derived
# assuming an expected rate of 1.0 island switches/Myr. We want
# a fairly vague prior because the uncertainty is considerable.
# Here we use a gamma(0.5,1.5). It has 50 % credible set (0.036,0.427)

mvi = 1
mni = 1

for ( i in 1:B.size() ) {
migrationRates[i] ~ dnGamma( 0.5, 1.5 )

# Biogeography model, assuming that tau is in time units
bio[i] ~ dnPhyloCTMC(   tree            = tau[i],
                            Q               = Q_bio,
                            rootFrequencies = pi_bio,
                            branchRates     = migrationRates[i],
                            nSites          = 1,
                            type            = "Standard"
                        )

bio[i].clamp( B[i] )

# Make the model
mymodel = model( bio[i] )

# Add moves for the biogeography part of the model
# assuming that the molecular evolution moves are already
# in the vector moves
moves[ mvi++ ] = mvSimplexElementScale(pi_bio, alpha=10.0, tune=true, weight=4.0)
moves[ mvi++ ] = mvSimplexElementScale(r_bio, alpha=10.0, tune=true, weight=6.0)
moves[mvi++ ] = mvScale(migrationRates[i],lambda=1,tune=true,weight=1)

}

# Set up tree, model and screen monitors
runName <- "Common_biogeo_model"

# Screen and model monitors
monitors[mni++] = mnModel(    
                                filename = runName + ".csv",
                                printgen = 10
                           )
monitors[mni++] = mnScreen(   
                                printgen = 10,
                                pi_bio,
                                r_bio,
                                migrationRates,
                                posterior = true,
                                likelihood = true,
                                prior = true
                            )                       
# Tree monitors
#fileName <- runName + ".tau" + ".tre"
monitors = mnExtNewick(  tau[i],
                                posterior = false,
                                likelihood = false,
                                prior = false,
                                filename = runName,
                                printgen = 10
                             )                        
mymcmc = mcmc( mymodel, monitors, moves )
mymcmc.run( generations=100000 )
